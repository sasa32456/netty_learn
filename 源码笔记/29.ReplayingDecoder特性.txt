




/**
* {@link ByteToMessageDecoder}的专用变体，它允许在阻塞I / O范例中实现非阻塞解码器。
 * <p>
 * {@link ReplayingDecoder}和{@link ByteToMessageDecoder}之间的最大区别在于{@link ReplayingDecoder}允许您实现{@code decode（）}
 和{@code decodeLast（）}方法，就像所有必需的字节一样已收到，而不是检查所需字节的可用性。例如，以下{@link ByteToMessageDecoder}实现：
 * <pre>
 * public class IntegerHeaderFrameDecoder extends {@link ByteToMessageDecoder} {
 *
 *   {@code @Override}
 *   protected void decode({@link ChannelHandlerContext} ctx,
 *                           {@link ByteBuf} buf, List&lt;Object&gt; out) throws Exception {
 *
 *     if (buf.readableBytes() &lt; 4) {
 *        return;
 *     }
 *
 *     buf.markReaderIndex();
 *     int length = buf.readInt();
 *
 *     if (buf.readableBytes() &lt; length) {
 *        buf.resetReaderIndex();
 *        return;
 *     }
 *
 *     out.add(buf.readBytes(length));
 *   }
 * }
 * </pre>
 *使用{@link ReplayingDecoder}简化如下：
 * <pre>
 * public class IntegerHeaderFrameDecoder
 *      extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {
 *
 *   protected void decode({@link ChannelHandlerContext} ctx,
 *                           {@link ByteBuf} buf) throws Exception {
 *
 *     out.add(buf.readBytes(buf.readInt()));
 *   }
 * }
 * </pre>
 *
 * <h3>How does this work?</h3>
 * <p>
 * {@link ReplayingDecoder} passes a specialized {@link ByteBuf} implementation which throws an {@link Error} of certain type when there's not enough data in the buffer.  In the {@code IntegerHeaderFrameDecoder} above, you just assumed that there will be 4 or more bytes in the buffer when you call {@code buf.readInt()}.  If there's really 4 bytes in the buffer, it will return the integer header as you expected.  Otherwise, the {@link Error} will be raised and the control will be returned to {@link ReplayingDecoder}.  If {@link ReplayingDecoder} catches the {@link Error}, then it will rewind the {@code readerIndex} of the buffer back to the 'initial' position (i.e. the beginning of the buffer) and call the {@code decode(..)} method again when more data is received into the buffer.
 * <p>
 * Please note that {@link ReplayingDecoder} always throws the same cached {@link Error} instance to avoid the overhead of creating a new {@link Error} and filling its stack trace for every throw.
 *
 * <h3>Limitations</h3>
 * <p>
 * 以简单为代价，{@link ReplayingDecoder}强制执行一些限制：
 * <ul>
 * <li>禁止某些缓冲操作。</ li>
 * <li>如果网络速度较慢且消息格式复杂，性能会更差，这与上面的示例不同。在这种情况下，您的解码器可能必须反复解码消息的相同部分。</ li>
 * <li>您必须记住，可以多次调用{@code decode（..）}方法来解码单个消息。例如，以下代码将不起作用：
 * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {
 *
 *   private final Queue&lt;Integer&gt; values = new LinkedList&lt;Integer&gt;();
 *
 *   {@code @Override}
 *   public void decode(.., {@link ByteBuf} buf, List&lt;Object&gt; out) throws Exception {
 *
 *     // A message contains 2 integers.
 *     values.offer(buf.readInt());
 *     values.offer(buf.readInt());
 *
 *     // This assertion will fail intermittently since values.offer()
 *     // can be called more than two times!
 *     assert values.size() == 2;
 *     out.add(values.poll() + values.poll());
 *   }
 * }</pre>
 *     正确的实现如下所示，您还可以使用“检查点”功能，这将在下一节中详细介绍。
 * <pre> public class MyDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {
 *
 *   private final Queue&lt;Integer&gt; values = new LinkedList&lt;Integer&gt;();
 *
 *   {@code @Override}
 *   public void decode(.., {@link ByteBuf} buf, List&lt;Object&gt; out) throws Exception {
 *
 *     // Revert the state of the variable that might have been changed
 *     // since the last partial decode.
 *     values.clear();
 *
 *     // A message contains 2 integers.
 *     values.offer(buf.readInt());
 *     values.offer(buf.readInt());
 *
 *     // Now we know this assertion will never fail.
 *     assert values.size() == 2;
 *     out.add(values.poll() + values.poll());
 *   }
 * }</pre>
 *     </li>
 * </ul>
 ** <h3>提高性能</ h3>
 * <p>
 *幸运的是，使用{@code checkpoint（）}方法可以显着提高复杂解码器实现的性能。 {@code checkpoint（）}方法更新缓冲区的“初始”位置，
 以便{@link ReplayingDecoder}将缓冲区的{@code readerIndex}倒回到您调用{@code checkpoint（）}的最后位置方法。
 *
 * <h4>使用{@link Enum} </ h4>调用{@code checkpoint（T）}
 * <p>
 *虽然您可以使用{@code checkpoint（）}方法并自行管理解码器的状态，但管理解码器状态的最简单方法是创建一个{@link Enum}类型，
 表示当前的状态。解码器并在状态改变时调用{@code checkpoint（T）}方法。根据要解码的消息的复杂程度，您可以拥有任意数量的状态：
 *
 * <pre>
 * public enum MyDecoderState {
 *   READ_LENGTH,
 *   READ_CONTENT;
 * }
 *
 * public class IntegerHeaderFrameDecoder
 *      extends {@link ReplayingDecoder}&lt;<strong>MyDecoderState</strong>&gt; {
 *
 *   private int length;
 *
 *   public IntegerHeaderFrameDecoder() {
 *     // Set the initial state.
 *     <strong>super(MyDecoderState.READ_LENGTH);</strong>
 *   }
 *
 *   {@code @Override}
 *   protected void decode({@link ChannelHandlerContext} ctx,
 *                           {@link ByteBuf} buf, List&lt;Object&gt; out) throws Exception {
 *     switch (state()) {
 *     case READ_LENGTH:
 *       length = buf.readInt();
 *       <strong>checkpoint(MyDecoderState.READ_CONTENT);</strong>
 *     case READ_CONTENT:
 *       ByteBuf frame = buf.readBytes(length);
 *       <strong>checkpoint(MyDecoderState.READ_LENGTH);</strong>
 *       out.add(frame);
 *       break;
 *     default:
 *       throw new Error("Shouldn't reach here.");
 *     }
 *   }
 * }
 * </pre>
 ** <h4>在没有参数的情况下调用{@code checkpoint（）} </ h4>
 * <p>
 *管理解码器状态的另一种方法是自己管理它。
 * <pre>
 * public class IntegerHeaderFrameDecoder
 *      extends {@link ReplayingDecoder}&lt;<strong>{@link Void}</strong>&gt; {
 *
 *   <strong>private boolean readLength;</strong>
 *   private int length;
 *
 *   {@code @Override}
 *   protected void decode({@link ChannelHandlerContext} ctx,
 *                           {@link ByteBuf} buf, List&lt;Object&gt; out) throws Exception {
 *     if (!readLength) {
 *       length = buf.readInt();
 *       <strong>readLength = true;</strong>
 *       <strong>checkpoint();</strong>
 *     }
 *
 *     if (readLength) {
 *       ByteBuf frame = buf.readBytes(length);
 *       <strong>readLength = false;</strong>
 *       <strong>checkpoint();</strong>
 *       out.add(frame);
 *     }
 *   }
 * }
 * </pre>
 ** <h3>用管道中的另一个解码器替换解码器</ h3>
 * <p>
 *如果您要编写协议多路复用器，您可能希望将{@link ReplayingDecoder}（协议检测器）替换为另一个{@link ReplayingDecoder}，
 {@ link ByteToMessageDecoder}或{@link MessageToMessageDecoder}（实际协议解码器） ）。
 只需调用{@link ChannelPipeline＃replace（ChannelHandler，String，ChannelHandler）}就无法实现这一目标，但还需要一些额外的步骤：
 * <pre>
 * public class FirstDecoder extends {@link ReplayingDecoder}&lt;{@link Void}&gt; {
 *
 *     {@code @Override}
 *     protected void decode({@link ChannelHandlerContext} ctx,
 *                             {@link ByteBuf} buf, List&lt;Object&gt; out) {
 *         ...
 *         // Decode the first message
 *         Object firstMessage = ...;
 *
 *         // Add the second decoder
 *         ctx.pipeline().addLast("second", new SecondDecoder());
 *
 *         if (buf.isReadable()) {
 *             // Hand off the remaining data to the second decoder
 *             out.add(firstMessage);
 *             out.add(buf.readBytes(<b>super.actualReadableBytes()</b>));
 *         } else {
 *             // Nothing to hand off
 *             out.add(firstMessage);
 *         }
 *         // Remove the first decoder (me)
 *         ctx.pipeline().remove(this);
 *     }
 * </pre>
 * @param <S>
 *     状态类型通常是{@link Enum};如果状态管理未使用，请使用{@link Void}
 */
public abstract class ReplayingDecoder<S> extends ByteToMessageDecoder {











/**
* {@link ChannelInboundHandlerAdapter}，它从一条消息解码到另一条消息。
 *例如，这里有一个实现，它将{@link String}解码为{@link Integer}，表示{@link String}的长度。
 *
 * <pre>
 *     public class StringToIntegerDecoder extends
 *             {@link MessageToMessageDecoder}&lt;{@link String}&gt; {
 *
 *         {@code @Override}
 *         public void decode({@link ChannelHandlerContext} ctx, {@link String} message,
 *                            List&lt;Object&gt; out) throws {@link Exception} {
 *             out.add(message.length());
 *         }
 *     }
 * </pre>
 *
*请注意，如果它们的类型为{@link ReferenceCounted}，则需要在刚刚传递的消息上调用{@link ReferenceCounted＃retain（）}。
这是必需的，因为{@link MessageToMessageDecoder}将在解码的消息上调用{@link ReferenceCounted＃release（）}。
 *
 */
public abstract class MessageToMessageDecoder<I> extends ChannelInboundHandlerAdapter {
