====================================GenericFutureListener
/**
 * Listens to the result of a {@link Future}.  The result of the asynchronous operation is notified once this listener is added by calling {@link Future#addListener(GenericFutureListener)}.
 */
public interface GenericFutureListener<F extends Future<?>> extends EventListener {

    /**
     * Invoked when the operation associated with the {@link Future} has been completed.
*与{@link Future}关联的操作完成后调用。     *
     * @param future  the source {@link Future} which called this callback
     */
    void operationComplete(F future) throws Exception;
}



=========================================ChannelFutureListener==============================
/ **
 *收听{@link ChannelFuture}的结果。通过调用{@link ChannelFuture #addListener（GenericFutureListener）}添加此侦听器后，
 将通知异步{@link Channel} I / O操作的结果。
 *
 * <h3>快速将控件返回给调用者</ h3>
 *
 * {@link #operationComplete（Future）}由I / O线程直接调用。因此，
 在处理程序方法中执行耗时的任务或阻塞操作可能会在I / O期间导致意外暂停。
 如果需要在I / O完成时执行阻塞操作，请尝试使用线程池在不同的线程中执行该操作。
 * /
public interface ChannelFutureListener extends GenericFutureListener<ChannelFuture> {

    /**
     * A {@link ChannelFutureListener} that closes the {@link Channel} which is associated with the specified {@link ChannelFuture}.
* {@link ChannelFutureListener}关闭与指定的{@link ChannelFuture}相关联的{@link Channel}。     */
    ChannelFutureListener CLOSE = new ChannelFutureListener() {
        @Override
        public void operationComplete(ChannelFuture future) {
            future.channel().close();
        }
    };

    /**
     * A {@link ChannelFutureListener} that closes the {@link Channel} when the operation ended up with a failure or cancellation rather than a success.
     * 一个{@link ChannelFutureListener}，当操作以失败或取消而不是成功结束时关闭{@link Channel}。
     */
    ChannelFutureListener CLOSE_ON_FAILURE = new ChannelFutureListener() {
        @Override
        public void operationComplete(ChannelFuture future) {
            if (!future.isSuccess()) {
                future.channel().close();
            }
        }
    };

    /**
     * {@link ChannelFutureListener}将{@link ChannelFuture}的{@link Throwable}转发到{@link ChannelPipeline}。这模仿了Netty 3的旧行为。
     */
    ChannelFutureListener FIRE_EXCEPTION_ON_FAILURE = new ChannelFutureListener() {
        @Override
        public void operationComplete(ChannelFuture future) {
            if (!future.isSuccess()) {
                future.channel().pipeline().fireExceptionCaught(future.cause());
            }
        }
    };

    // Just a type alias
}


====================================ChannelPromise
**
 * Special {@link ChannelFuture} which is writable.
 */
public interface ChannelPromise extends ChannelFuture, Promise<Void> {

 @Override
    ChannelPromise setSuccess(Void result);

    ChannelPromise setSuccess();
    。。。

}



===========================================

/**
 * Special {@link Future} which is writable.
 */
public interface Promise<V> extends Future<V> {

    /**
     * Marks this future as a success and notifies all listeners.
     * 将此未来标记为成功并通知所有听众。
     *
     * If it is success or failed already it will throw an {@link IllegalStateException}.
     */
    Promise<V> setSuccess(V result);

    /**
     * Marks this future as a success and notifies all listeners.
     *
     * @return {@code true} if and only if successfully marked this future as  a success. Otherwise {@code false} because this future is already marked as either a success or a failure.
     */
    boolean trySuccess(V result);

    /**
     * Marks this future as a failure and notifies all  listeners.
     *
     * If it is success or failed already it will throw an {@link IllegalStateException}.
     */
    Promise<V> setFailure(Throwable cause);

    /**
     * Marks this future as a failure and notifies all listeners.
     *
     * @return {@code true} if and only if successfully marked this future as
     *         a failure. Otherwise {@code false} because this future is
     *         already marked as either a success or a failure.
     */
    boolean tryFailure(Throwable cause);

    /**
     * Make this future impossible to cancel.
     *
     * @return {@code true} if and only if successfully marked this future as uncancellable or it is already done
     *         without being cancelled.  {@code false} if this future has been cancelled already.
     */
    boolean setUncancellable();
。。。
}
====================================DefaultChannelPromise

/**
 * The default {@link ChannelPromise} implementation.  It is recommended to use {@link Channel#newPromise()} to create
 * a new {@link ChannelPromise} rather than calling the constructor explicitly.
 */
public class DefaultChannelPromise extends DefaultPromise<Void> implements ChannelPromise, FlushCheckpoint {

    private final Channel channel;
    private long checkpoint;

    /**
     * Creates a new instance.
     *
     * @param channel
     *        the {@link Channel} associated with this future
     */
    public DefaultChannelPromise(Channel channel) {
        this.channel = checkNotNull(channel, "channel");
    }

    /**
     * Creates a new instance.
     *
     * @param channel
     *        the {@link Channel} associated with this future
     */
    public DefaultChannelPromise(Channel channel, EventExecutor executor) {
        super(executor);
        this.channel = checkNotNull(channel, "channel");
    }

    @Override
    public ChannelPromise setSuccess(Void result) {
        super.setSuccess(result);
        return this;
    }

======================================DefaultPromise

public class DefaultPromise<V> extends AbstractFuture<V> implements Promise<V> {

  private static final InternalLogger logger = InternalLoggerFactory.getInstance(DefaultPromise.class);
    private static final InternalLogger rejectedExecutionLogger =
            InternalLoggerFactory.getInstance(DefaultPromise.class.getName() + ".rejectedExecution");
    private static final int MAX_LISTENER_STACK_DEPTH = Math.min(8,
            SystemPropertyUtil.getInt("io.netty.defaultPromise.maxListenerStackDepth", 8));
    @SuppressWarnings("rawtypes")
    private static final AtomicReferenceFieldUpdater<DefaultPromise, Object> RESULT_UPDATER =
            AtomicReferenceFieldUpdater.newUpdater(DefaultPromise.class, Object.class, "result");
    private static final Object SUCCESS = new Object();
    private static final Object UNCANCELLABLE = new Object();
    private static final CauseHolder CANCELLATION_CAUSE_HOLDER = new CauseHolder(ThrowableUtil.unknownStackTrace(
            new CancellationException(), DefaultPromise.class, "cancel(...)"));

    private volatile Object result;
    private final EventExecutor executor;

  @Override
    public Promise<V> setSuccess(V result) {
        if (setSuccess0(result)) {
            return this;
        }
        throw new IllegalStateException("complete already: " + this);
    }

     private boolean setSuccess0(V result) {
           return setValue0(result == null ? SUCCESS : result);
       }
      private boolean setValue0(Object objResult) {
          if (RESULT_UPDATER.compareAndSet(this, null, objResult) ||
              RESULT_UPDATER.compareAndSet(this, UNCANCELLABLE, objResult)) {
              if (checkNotifyWaiters()) {
                  notifyListeners();
              }
              return true;
          }
          return false;
      }

    private void notifyListeners() {
        EventExecutor executor = executor();
        if (executor.inEventLoop()) {
            final InternalThreadLocalMap threadLocals = InternalThreadLocalMap.get();
            final int stackDepth = threadLocals.futureListenerStackDepth();
            if (stackDepth < MAX_LISTENER_STACK_DEPTH) {
                threadLocals.setFutureListenerStackDepth(stackDepth + 1);
                try {
                    notifyListenersNow();
                } finally {
                    threadLocals.setFutureListenerStackDepth(stackDepth);
                }
                return;
            }
        }

        safeExecute(executor, new Runnable() {
            @Override
            public void run() {
                notifyListenersNow();
            }
        });
    }

      private void notifyListenersNow() {
            Object listeners;
            synchronized (this) {
                // Only proceed if there are listeners to notify and we are not already notifying listeners.
                if (notifyingListeners || this.listeners == null) {
                    return;
                }
                notifyingListeners = true;
                listeners = this.listeners;
                this.listeners = null;
            }
            for (;;) {
                if (listeners instanceof DefaultFutureListeners) {
                    notifyListeners0((DefaultFutureListeners) listeners);
                } else {
                    notifyListener0(this, (GenericFutureListener<?>) listeners);
                }
                synchronized (this) {
                    if (this.listeners == null) {
                        // Nothing can throw from within this method, so setting notifyingListeners back to false does not
                        // need to be in a finally block.
                        notifyingListeners = false;
                        return;
                    }
                    listeners = this.listeners;
                    this.listeners = null;
                }
            }
        }

        .................................................
==============================================
JDK所提供的Future只能通过手工方法检查执行结果，而这个操作会阻塞
Netty则对ChannelFuture进行了增强，通过ChannelFutureListener以回调的方式获取执行结果，去除了手工监测阻塞的操作。
值得注意的是：ChannelFutureListener的operationComplete方法是由I/O线程执行的，因此不要在此执行耗时操作，否则使用其他线程池执行
