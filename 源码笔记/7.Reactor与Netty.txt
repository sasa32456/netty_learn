
/**
*表示{@link SelectableChannel}注册{@link Selector}的令牌。
 *
 * <p>每次使用选择器注册频道时，都会创建一个选择键。密钥在<i>取消</ i>之前仍然有效，方法是调用其{@link #cancel cancel}方法，关闭其频道或关闭其选择器。取消密钥不会立即将其从选择器中删除;它将被添加到选择器的<a href="Selector.html#ks"> <i> cancelled-key set </ i> </a>，以便在下一个选择操作期间删除。可以通过调用其{@link #isValid isValid}方法来测试密钥的有效性。
 *
 * <a name="opsets"></a>
*
 * <p>选择键包含两个表示为整数值的<i>操作集</ i>。操作集的每个位表示密钥通道支持的可选操作的类别。
 *
 * <ul>
 *
 * <li> <p> <i>兴趣集</ i>确定下次调用选择器的一个选择方法时将测试哪些操作类别是否准备就绪。利息集初始化为创建密钥时给定的值;稍后可以通过{@link #interestOps（int）}方法进行更改。 </ p> </ LI>
 *
 * <li> <p> <i>就绪设置</ i>通过键的选择器识别检测到键的通道准备就绪的操作类别。创建密钥时，就绪集初始化为零;稍后可以在选择操作期间由选择器更新，但不能直接更新。 </ p> </ LI>
 *
 * </ ul>
 *
* <p>选择键的就绪集指示其通道已为某些操作类别做好准备，这是一个暗示，但不能保证，这样的类别中的操作可以由线程执行而不会导致线程阻塞。在完成选择操作之后，就绪设置最有可能是准确的。外部事件和在相应通道上调用的I / O操作可能会使其不准确。
 *
 * <p>此类定义所有已知的操作集位，但精确地指定给定通道支持哪些位取决于通道的类型。 {@link SelectableChannel}的每个子类定义了一个{@link SelectableChannel＃validOps（）validOps（）}方法，该方法返回一个集合，仅标识通道支持的那些操作。尝试设置或测试密钥通道不支持的操作设置位将导致适当的运行时异常。
 *
 * <p>通常需要将某些特定于应用程序的数据与选择键相关联，例如，表示更高级别协议状态的对象，并处理准备就绪通知以实现该协议。因此，选择键支持单个任意对象的<i>附件</ i>到键。可以通过{@link #attach attach}方法附加对象，然后通过{@link #attachment（）attachment}方法检索。
 *
 * <p>多个并发线程可以安全地使用选择键。通常，读取和写入兴趣集的操作将与选择器的某些操作同步。具体如何执行此同步依赖于实现：在一个简单的实现中，如果选择操作已在进行中，则读取或写入兴趣集可能会无限期地阻塞;在高性能实现中，如果有的话，读取或写入兴趣集可能会暂时阻止。在任何情况下，选择操作将始终使用操作开始时当前的兴趣设定值。 </ p>
 *
 *
 * @author Mark Reinhold
 * @author JSR-51 Expert Group
 * @since 1.4
 *
 * @see SelectableChannel
 * @see Selector
 */

public abstract class SelectionKey {
。。。。。。。
    // -- Attachments --

    private volatile Object attachment = null;

    private static final AtomicReferenceFieldUpdater<SelectionKey,Object>
        attachmentUpdater = AtomicReferenceFieldUpdater.newUpdater(
            SelectionKey.class, Object.class, "attachment"
        );

    /**
    *将给定对象附加到此键。
     *
     * <p>稍后可以通过{@link #attachment（）attachment}方法检索附加对象。一次只能附加一个物体;调用此方法会导致丢弃任何以前的附件。可以通过附加<tt> null </ tt>来丢弃当前附件。 </ p>
     *
     * @param  ob
     *         The object to be attached; may be <tt>null</tt>
     *
     * @return  The previously-attached object, if any,
     *          otherwise <tt>null</tt>
     */
    public final Object attach(Object ob) {
        return attachmentUpdater.getAndSet(this, ob);
    }

   /**
    *将此键的兴趣设置为给定值。
     *
     * <p>可以随时调用此方法。它是否阻塞以及持续多长时间依赖于实现。 </ p>
     *
     * @param ops新的兴趣集
     *
     * @return  This selection key
     *
     * @throws  IllegalArgumentException
     *          If a bit in the set does not correspond to an operation that
     *          is supported by this key's channel, that is, if
     *          {@code (ops & ~channel().validOps()) != 0}
     *
     * @throws  CancelledKeyException
     *          If this key has been cancelled
     */
    public abstract SelectionKey interestOps(int ops);

。。。。。。
}










===============================================Selector============================================

/*** {@link SelectableChannel}对象的多路复用器。
 *
 * <p>可以通过调用此类的{@link #open open}方法来创建选择器，该方法将使用系统的默认{@link java.nio.channels.spi.SelectorProvider选择器提供程序}来创建新的选择器。还可以通过调用自定义选择器提供程序的{@link java.nio.channels.spi.SelectorProvider #openSelector openSelector}方法来创建选择器。选择器保持打开状态，直到它通过{@link #close close}方法关闭。
 *
 * <a name="ks"> </a>
 *
 * <p>可选择频道的选择器注册由{@link SelectionKey}对象表示。选择器保持三组选择
 *键：
 *
 * <ul>
 *
 * <li> <p> <i>键集</ i>包含表示此选择器当前通道注册的键。该集由{@link #keys（）keys}方法返回。 </ p> </ LI>
 *
 * <li> <p> <i>选择密钥集</ i>是一组密钥，以便检测到每个密钥的信道已准备好用于先前在密钥的兴趣集中识别的至少一个操作。选择操作。该集由{@link #selectedKeys（）selectedKeys}方法返回。选定键集始终是键集的子集。 </ p> </ LI>
 *
 * <li> <p> <i> cancelled-key </ i>设置是已取消但其频道尚未取消注册的一组密钥。此套装无法直接访问。取消密钥集始终是密钥集的子集。 </ p> </ LI>
 *
 * </ ul>
 ** <p>新创建的选择器中所有三个组都是空的。
 *
 * <p>通过通道的{@link SelectableChannel #register（Selector，int）register}方法将一个键添加到选择器的键集中，作为注册通道的副作用。在选择操作期间，取消的密钥将从密钥集中删除。密钥集本身不能直接修改。
 *
 * <p>取消时，无论是通过关闭其频道还是调用其{@link SelectionKey＃cancel cancel}方法，都会将一个键添加到其选择器的已取消键集中。取消密钥将导致其通道在下一个选择操作期间取消注册，此时密钥将从所有选择器的密钥集中删除。
 *
 * <a name="sks"> </a> <p>通过选择操作将键添加到选定键集。通过调用set的{@link java.util.Set #remove（java.lang.Object）remove}方法或通过调用{@link java.util.Iterator #remove，可以直接从selected-key集中删除密钥。 （）删除从集合中获取的{@link java.util.Iterator iterator}的方法。密钥永远不会以任何其他方式从选定密钥集中删除;特别是，它们不会作为选择操作的副作用而被删除。密钥可能无法直接添加到选定密钥集。 </ p>
 *
 *
 * <a name="selop"> </a>
 * <h2>选择</ h2>
 *
 * <p>在每次选择操作期间，可以在选择器的选定键组中添加和删除键，并且可以从键和取消键组中删除键。选择由{@link #select（）}，{@ link #select（long）}和{@link #selectNow（）}方法执行，包括三个步骤：
 * </ p>
 ** <ol>
 *
 * <li> <p>取消密钥集中的每个密钥都从其所属的每个密钥集中删除，并且其通道已取消注册。此步骤将取消的密钥设置为空。 </ p> </ LI>
 *
 * <li> <p>查询基础操作系统，以了解每个剩余通道是否准备好执行其选择操作开始时由其键的兴趣集标识的任何操作。对于已准备好进行至少一个此类操作的通道，将执行以下两个操作之一：</ p>
 *
 * <ol>
 *
 * <li> <p>如果通道的密钥不在选定密钥集中，则将其添加到该集合中，并修改其就绪操作集以准确识别现在报告该通道准备就绪的那些操作。先前记录在就绪集中的任何准备就绪信息都将被丢弃。 </ p> </ LI>
 *
 * <li> <p>否则，通道的密钥已经在选择密钥集中，因此修改其就绪操作集以识别报告信道准备就绪的任何新操作。先前记录在就绪集中的任何准备信息都被保留;换句话说，底层系统返回的就绪集按位顺序分离到密钥的当前就绪集中。 </ p> </ LI>
 *
 * </ ol>
 *
 *如果在此步骤开始时设置的键中的所有键都具有空兴趣集，则所选键集和任何键的就绪操作集都不会更新。
 *
 * <li> <p>如果在步骤（2）正在进行时将任何键添加到取消键组，则按步骤（1）处理它们。 </ p> </ LI>
 *
 * </ ol>
 ** <p>选择操作是否阻止等待一个或多个通道准备就绪，如果是这样，持续多长时间，这是三种选择方法之间唯一的本质区别。 </ p>
 *
 *
 * <h2>并发</ h2>
 *
 * <p>选择器本身可以安全地用于多个并发线程;然而，他们的关键词不是。
 *
 * <p>选择操作按顺序在选择器本身，键组和选定键组上同步。它们还在上面的步骤（1）和（3）中同步取消的密钥集。
 *
 * <p>在选择操作正在进行时对选择器键的兴趣组所做的更改对该操作没有影响;它们将在下一个选择操作中看到。
 *
 * <p>可以取消密钥，并且可以随时关闭频道。因此，在一个或多个选择器的密钥集中存在密钥并不意味着密钥有效或其信道是开放的。如果有其他线程取消密钥或关闭通道的可能性，应用程序代码应该小心同步并根据需要检查这些条件。
 *
 * <p>在{@link #select（）}或{@link之一中被阻止的线程
 * #select（long）}方法可能被其中一个其他线程中断
 *三种方式：
 ** <ul>
 *
 * <li> <p>通过调用选择器的{@link #wakeup wakeup}方法，
 * </ p> </ li>
 *
 * <li> <p>通过调用选择器的{@link #close close}方法，或
 * </ p> </ li>
 *
 * <li> <p>通过调用被阻塞线程的{@link java.lang.Thread＃interrupt（）interrupt}方法，在这种情况下，它的中断状态将被设置，并且选择器的{@link #wakeup wakeup}方法将是调用。 </ p> </ LI>
 *
 * </ ul>
 *
 * <p> {@link #close close}方法在选择器和所有三个键集上以与选择操作中相同的顺序同步。
 *
 * <a name="ksc"> </a>
 *
 * <p>选择器的密钥和选择密钥集通常不安全，可供多个并发线程使用。如果这样的线程可能直接修改其中一个集合，则应通过同步集合本身来控制访问。这些集合'{@link java.util.Set＃iterator（）iterator}方法返回的迭代器是<i> fail-fast：</ i>如果在创建迭代器之后修改了集合，则以任何方式除外调用迭代器自己的{@link java.util.Iterator #remove（）remove}方法，然后抛出{@link java.util.ConcurrentModificationException}。 </ p>
 *
 *
 * @author Mark Reinhold
 * @author JSR-51 Expert Group
 * @since 1.4
 *
 * @see SelectableChannel
 * @see SelectionKey
 */
public abstract class Selector implements Closeable {
    /**
     *导致尚未返回的第一个选择操作立即返回。
     *
     * <p>如果在调用{@link #select（）}或{@link #select（long）}方法时当前阻止了另一个线程，则该调用将立即返回。如果当前没有选择操作正在进行，那么除非在此期间调用{@link #selectNow（）}方法，否则将立即返回其中一个方法的下一次调用。在任何情况下，该调用返回的值可能都不为零。 {@link #select（）}或{@link #select（long）}方法的后续调用将像往常一样阻止，除非在此期间再次调用此方法。
     *
     * <p>在两次连续选择操作之间多次调用此方法与仅调用一次具有相同的效果。 </ p>
     *
     * @return  This selector
     */
    public abstract Selector wakeup();
。。。
}


        mainReactor         subReactor
client                      read        send
client                      read        send
client                      read        send
        acceptor
                            threadPool          worker threads
                            queued tasks        decode compute encode
                            。。。。



