使用NIO进行文件读取的步骤
1.从FileInputStream对象获取Channel对象
2.创建Buffer
3.将数据从Channel中读取到Buffer

0<=mark<=position<=limit<=capacity

flip()方法
1.将limit值设置为当前的position
2.将position设置为0

clear()
1.将limit值设置为capacity
2.将position设置为0

compact()
1.将所有未读的元素复制到buffer起始处
2.将position设置到最后一个维度元素后面
3.将limit设置为capacity
4.现在buffer准备好了，但是不会覆盖未读数据



/**
*零个或多个字节（八位字节）的随机和顺序可访问序列。此接口为一个或多个原始字节数组（{@code byte []}）和{@linkplain ByteBuffer NIO缓冲区}提供抽象视图。
 *
 * <h3>创建缓冲区</ h3>
 *
 *建议使用{@link Unpooled}中的辅助方法创建一个新缓冲区，而不是调用单个实现的构造函数。
 *
 * <h3>随机访问索引</ h3>
 *
 *就像普通的原始字节数组一样，{@link ByteBuf}使用<a href="http://en.wikipedia.org/wiki/Zero-based_numbering">从零开始的索引</a>。
 这意味着第一个字节的索引始终是{@code 0}，最后一个字节的索引始终是{@link #capacity（）capacity  -  1}。
 例如，要迭代缓冲区的所有字节，无论其内部实现如何，您都可以执行以下操作：
 *
 * <pre>
 * {@link ByteBuf} buffer = ...;
 * for (int i = 0; i &lt; buffer.capacity(); i ++) {
 *     byte b = buffer.getByte(i);
 *     System.out.println((char) b);
 * }
 * </pre>
 *
* <h3>顺序访问索引</ h3>
 *
 * {@link ByteBuf}提供两个指针变量来支持顺序读写操作 -  {@link #readerIndex（）readerIndex}用于读操作，{@link #writerIndex（）writerIndex}分别用于写操作。下图显示了如何通过两个指针将缓冲区分为三个区域：
 *
 * <pre>
 *      +-------------------+------------------+------------------+
 *      | discardable bytes |  readable bytes  |  writable bytes  |
 *      |                   |     (CONTENT)    |                  |
 *      +-------------------+------------------+------------------+
 *      |                   |                  |                  |
 *      0      <=      readerIndex   <=   writerIndex    <=    capacity
 * </pre>
 *
 * <h4>Readable bytes (the actual content)</h4>
 *
 * This segment is where the actual data is stored.  Any operation whose name starts with {@code read} or {@code skip} will get or skip the data at the current {@link #readerIndex() readerIndex} and increase it by the number of read bytes.  If the argument of the read operation is also a {@link ByteBuf} and no destination index is specified, the specified buffer's {@link #writerIndex() writerIndex} is increased together.
 * <p>
 * If there's not enough content left, {@link IndexOutOfBoundsException} is raised.  The default value of newly allocated, wrapped or copied buffer's {@link #readerIndex() readerIndex} is {@code 0}.
 *
 * <pre>
 * // Iterates the readable bytes of a buffer.
 * {@link ByteBuf} buffer = ...;
 * while (buffer.isReadable()) {
 *     System.out.println(buffer.readByte());
 * }
 * </pre>
 *
 * <h4>Writable bytes</h4>
 *
 * This segment is a undefined space which needs to be filled.  Any operation whose name starts with {@code write} will write the data at the current {@link #writerIndex() writerIndex} and increase it by the number of written bytes.  If the argument of the write operation is also a {@link ByteBuf}, and no source index is specified, the specified buffer's {@link #readerIndex() readerIndex} is increased together.
 * <p>
 * If there's not enough writable bytes left, {@link IndexOutOfBoundsException} is raised.  The default value of newly allocated buffer's {@link #writerIndex() writerIndex} is {@code 0}.  The default value of wrapped or copied buffer's {@link #writerIndex() writerIndex} is the {@link #capacity() capacity} of the buffer.
 *
 * <pre>
 * // Fills the writable bytes of a buffer with random integers.
 * {@link ByteBuf} buffer = ...;
 * while (buffer.maxWritableBytes() >= 4) {
 *     buffer.writeInt(random.nextInt());
 * }
 * </pre>
 *
 * <h4>Discardable bytes</h4>
 *
 * This segment contains the bytes which were read already by a read operation. Initially, the size of this segment is {@code 0}, but its size increases up to the {@link #writerIndex() writerIndex} as read operations are executed. The read bytes can be discarded by calling {@link #discardReadBytes()} to reclaim unused area as depicted by the following diagram:
 *
 * <pre>
 *  BEFORE discardReadBytes()
 *
 *      +-------------------+------------------+------------------+
 *      | discardable bytes |  readable bytes  |  writable bytes  |
 *      +-------------------+------------------+------------------+
 *      |                   |                  |                  |
 *      0      <=      readerIndex   <=   writerIndex    <=    capacity
 *
 *
 *  AFTER discardReadBytes()
 *
 *      +------------------+--------------------------------------+
 *      |  readable bytes  |    writable bytes (got more space)   |
 *      +------------------+--------------------------------------+
 *      |                  |                                      |
 * readerIndex (0) <= writerIndex (decreased)        <=        capacity
 * </pre>
 *
 * Please note that there is no guarantee about the content of writable bytes after calling {@link #discardReadBytes()}.  The writable bytes will not be moved in most cases and could even be filled with completely different data depending on the underlying buffer implementation.
 *
 * <h4>Clearing the buffer indexes</h4>
 *
 * You can set both {@link #readerIndex() readerIndex} and {@link #writerIndex() writerIndex} to {@code 0} by calling {@link #clear()}. It does not clear the buffer content (e.g. filling with {@code 0}) but just clears the two pointers.  Please also note that the semantic of this operation is different from {@link ByteBuffer#clear()}.
 *
 * <pre>
 *  BEFORE clear()
 *
 *      +-------------------+------------------+------------------+
 *      | discardable bytes |  readable bytes  |  writable bytes  |
 *      +-------------------+------------------+------------------+
 *      |                   |                  |                  |
 *      0      <=      readerIndex   <=   writerIndex    <=    capacity
 *
 *
 *  AFTER clear()
 *
 *      +---------------------------------------------------------+
 *      |             writable bytes (got more space)             |
 *      +---------------------------------------------------------+
 *      |                                                         |
 *      0 = readerIndex = writerIndex            <=            capacity
 * </pre>
 *
 * <h3>Search operations</h3>
 *
 * For simple single-byte searches, use {@link #indexOf(int, int, byte)} and {@link #bytesBefore(int, int, byte)}. {@link #bytesBefore(byte)} is especially useful when you deal with a {@code NUL}-terminated string. For complicated searches, use {@link #forEachByte(int, int, ByteProcessor)} with a {@link ByteProcessor} implementation.
 *
 * <h3>Mark and reset</h3>
 *
 * There are two marker indexes in every buffer. One is for storing {@link #readerIndex() readerIndex} and the other is for storing {@link #writerIndex() writerIndex}.  You can always reposition one of the two indexes by calling a reset method.  It works in a similar fashion to the mark and reset methods in {@link InputStream} except that there's no {@code readlimit}.
 *
 * <h3>Derived buffers</h3>
 *
 * You can create a view of an existing buffer by calling one of the following methods:
 * <ul>
 *   <li>{@link #duplicate()}</li>
 *   <li>{@link #slice()}</li>
 *   <li>{@link #slice(int, int)}</li>
 *   <li>{@link #readSlice(int)}</li>
 *   <li>{@link #retainedDuplicate()}</li>
 *   <li>{@link #retainedSlice()}</li>
 *   <li>{@link #retainedSlice(int, int)}</li>
 *   <li>{@link #readRetainedSlice(int)}</li>
 * </ul>
 * A derived buffer will have an independent {@link #readerIndex() readerIndex},
 * {@link #writerIndex() writerIndex} and marker indexes, while it shares
 * other internal data representation, just like a NIO buffer does.
 * <p>
 * In case a completely fresh copy of an existing buffer is required, please call {@link #copy()} method instead.
 *
 * <h4>Non-retained and retained derived buffers</h4>
 *
 * Note that the {@link #duplicate()}, {@link #slice()}, {@link #slice(int, int)} and {@link #readSlice(int)} does NOT call {@link #retain()} on the returned derived buffer, and thus its reference count will NOT be increased. If you need to create a derived buffer with increased reference count, consider using {@link #retainedDuplicate()}, {@link #retainedSlice()}, {@link #retainedSlice(int, int)} and {@link #readRetainedSlice(int)} which may return a buffer implementation that produces less garbage.
 *
 * <h3>Conversion to existing JDK types</h3>
 *
 * <h4>Byte array</h4>
 *
 * If a {@link ByteBuf} is backed by a byte array (i.e. {@code byte[]}), you can access it directly via the {@link #array()} method.  To determine if a buffer is backed by a byte array, {@link #hasArray()} should be used.
 *
 * <h4>NIO Buffers</h4>
 *
 * If a {@link ByteBuf} can be converted into an NIO {@link ByteBuffer} which shares its content (i.e. view buffer), you can get it via the {@link #nioBuffer()} method.  To determine if a buffer can be converted into an NIO buffer, use {@link #nioBufferCount()}.
 *
 * <h4>Strings</h4>
 *
 * Various {@link #toString(Charset)} methods convert a {@link ByteBuf} into a {@link String}.  Please note that {@link #toString()} is not a conversion method.
 *
 * <h4>I/O Streams</h4>
 *
 * Please refer to {@link ByteBufInputStream} and {@link ByteBufOutputStream}.
 */
@SuppressWarnings("ClassMayBeInterface")
public abstract class ByteBuf implements ReferenceCounted, Comparable<ByteBuf> {


/**
     * 返回此缓冲区的后备字节数组中第一个字节的偏移量。
     *
     * @throws UnsupportedOperationException
     *         if there no accessible backing byte array
     */
    public abstract int arrayOffset();
。。。


}

注意：通过索引来访问Byte时并不会改变真实的读索引和写索引；我们可以通过ByteBuf的readerIndex()与writeIndex()方法分别直接修改读索引和写索引。


/**
 * A skeletal implementation of a buffer.
 * 缓冲区的骨架实现。
 */
public abstract class AbstractByteBuf extends ByteBuf {


    //是否可读
    @Override
    public boolean isReadable() {
        return writerIndex > readerIndex;
    }

    //是否可写
    @Override
    public boolean isWritable() {
        return capacity() > writerIndex;
    }

    //清空
   @Override
    public ByteBuf clear() {
        readerIndex = writerIndex = 0;
        return this;
    }
     /**
     *丢弃第0个索引和{@code readerIndex}之间的字节。
     *它移动{@code readerIndex}和{@code writerIndex}之间的字节
     *到第0个索引，并设置{@code readerIndex}和{@code writerIndex}
     *分别为{@code 0}和{@code oldWriterIndex  -  oldReaderIndex}。
     * <p>
     * Please refer to the class documentation for more detailed explanation.
     */
    @Override
    public ByteBuf discardReadBytes() {
        ensureAccessible();
        if (readerIndex == 0) {
            return this;
        }

        if (readerIndex != writerIndex) {
            setBytes(0, this, readerIndex, writerIndex - readerIndex);
            writerIndex -= readerIndex;
            adjustMarkers(readerIndex);
            readerIndex = 0;
        } else {
            adjustMarkers(readerIndex);
            writerIndex = readerIndex = 0;
        }
        return this;
    }

}
