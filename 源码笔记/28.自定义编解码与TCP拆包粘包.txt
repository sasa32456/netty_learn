com.n33.netty.learn.handler


================================ByteToMessageDecoder===================
/**
* {@link ChannelInboundHandlerAdapter}，它以类似流的方式将字节从一个{@link ByteBuf}解码为另一个Message类型。
 *
 *例如，这里有一个实现，它从输入{@link ByteBuf}读取所有可读字节并创建一个新的{@link ByteBuf}。
 *
 * <pre>
 *     public class SquareDecoder extends {@link ByteToMessageDecoder} {
 *         {@code @Override}
 *         public void decode({@link ChannelHandlerContext} ctx, {@link ByteBuf} in, List&lt;Object&gt; out)
 *                 throws {@link Exception} {
 *             out.add(in.readBytes(in.readableBytes()));
 *         }
 *     }
 * </pre>
 *
* <h3>帧检测</ h3>
 * <p>
 *通常，应在流水线中通过添加{@link DelimiterBasedFrameDecoder}，{@ link FixedLengthFrameDecoder}，{@link LengthFieldBasedFrameDecoder}
 或{@link LineBasedFrameDecoder}来处理帧检测。
 * <p>
 *如果需要自定义帧解码器，则在使用{@link ByteToMessageDecoder}实现一个时需要小心。通过检查{@link ByteBuf＃readableBytes（）}，
 确保缓冲区中有足够的字节用于完整的帧。如果完整帧没有足够的字节，则返回而不修改读取器索引以允许更多字节到达。
 * <p>
 *要在不修改阅读器索引的情况下检查完整帧，请使用{@link ByteBuf＃getInt（int）}等方法。一个<strong>必须</ strong>
 在使用{@link ByteBuf＃getInt（int）}等方法时使用阅读器索引。例如，调用<tt> in.getInt（0）</ tt>假设帧在缓冲区的开头处开始，
 但情况并非总是如此。请改用<tt> in.getInt（in.readerIndex（））</ tt>。
 --此处用于拆包粘包
 * <h3>陷阱</ h3>
 * <p>
 *请注意{@link ByteToMessageDecoder} <strong>的子类不得</ strong>使用{@link @Sharable}进行注释。
 * <p>
 *如果返回的缓冲区未释放或添加到<tt> out </ tt> {@link List}，则某些方法（如{@link ByteBuf＃readBytes（int）}
 将导致内存泄漏。使用{@link ByteBuf＃readSlice（int）}等派生缓冲区来避免内存泄漏。
 * /
public abstract class ByteToMessageDecoder extends ChannelInboundHandlerAdapter {


    /**
     * Decode the from one {@link ByteBuf} to an other. This method will be called till either the input {@link ByteBuf} has nothing to read when return from this method or till nothing was read from the input {@link ByteBuf}.
     * 将一个{@link ByteBuf}解码为另一个。调用此方法，直到输入{@link ByteBuf}从此方法返回时无法读取或从输入{@link ByteBuf}中读取任何内容。
     *
     * @param ctx           the {@link ChannelHandlerContext} which this {@link ByteToMessageDecoder} belongs to
     * @param in            the {@link ByteBuf} from which to read data
     * @param out           the {@link List} to which decoded messages should be added
     * @throws Exception    is thrown if an error occurs
     */
    protected abstract void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception;

}


TCP粘包与拆包



出站处理器
/**
* {@link ChannelOutboundHandlerAdapter}，它以类似流的方式从一条消息到{@link ByteBuf}对消息进行编码。
 *
 *将{@link Integer}编码为{@link ByteBuf}的示例实现。
 *
 * <pre>
 *     public class IntegerEncoder extends {@link MessageToByteEncoder}&lt;{@link Integer}&gt; {
 *         {@code @Override}
 *         public void encode({@link ChannelHandlerContext} ctx, {@link Integer} msg, {@link ByteBuf} out)
 *                 throws {@link Exception} {
 *             out.writeInt(msg);
 *         }
 *     }
 * </pre>
 */
public abstract class MessageToByteEncoder<I> extends ChannelOutboundHandlerAdapter {
    /**
     *将邮件编码到{@link ByteBuf}。将为每个可由此编码器处理的书面消息调用此方法。
     *
     * @param ctx           the {@link ChannelHandlerContext} which this {@link MessageToByteEncoder} belongs to
     * @param msg           the message to encode
     * @param out           the {@link ByteBuf} into which the encoded message will be written
     * @throws Exception    is thrown if an error occurs
     */
    protected abstract void encode(ChannelHandlerContext ctx, I msg, ByteBuf out) throws Exception;


}


关于Netty编解码器重要结论：
1.无论是编码器还是解码器，其所收到的消息类型必须与参数类型一致，否则会传递到下一个编解码器，在该编解码器中并不会执行。
2.在解码器进行数据解码时，一定要判断缓冲数据是否足够，否则会产生一些问题。

