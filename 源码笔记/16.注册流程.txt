--其实已经。。。。。腻了？


嘛。。。
混也要混合过去啊。。。
哈哈，算了，就这样吧
慢慢来。



==================================================AbstractBootstrap=====================
 final ChannelFuture initAndRegister() {
        Channel channel = null;
        try {
            channel = channelFactory.newChannel();
            init(channel);
        } catch (Throwable t) {
            if (channel != null) {
                // channel can be null if newChannel crashed (eg SocketException("too many open files"))
                channel.unsafe().closeForcibly();
                // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor
                return new DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE).setFailure(t);
            }
            // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor
            return new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);
        }

        ChannelFuture regFuture = config().group().register(channel);
        if (regFuture.cause() != null) {
            if (channel.isRegistered()) {
                channel.close();
            } else {
                channel.unsafe().closeForcibly();
            }
        }

        // If we are here and the promise is not failed, it's one of the following cases:
        // 1) If we attempted registration from the event loop, the registration has been completed at this point.
        //    i.e. It's safe to attempt bind() or connect() now because the channel has been registered.
        // 2) If we attempted registration from the other thread, the registration request has been successfully
        //    added to the event loop's task queue for later execution.
        //    i.e. It's safe to attempt bind() or connect() now:
        //         because bind() or connect() will be executed *after* the scheduled registration task is executed
        //         because register(), bind(), and connect() are all bound to the same thread.
        //如果我们在这里并且承诺未失败，则是以下情况之一：
        // 1）如果我们尝试从事件循环进行注册，则此时已完成注册。
        //即现在尝试bind（）或connect（）是安全的，因为频道已经注册。
        // 2）如果我们尝试从另一个线程注册，则注册请求已成功
        //添加到事件循环的任务队列中以供稍后执行。
        //即现在尝试bind（）或connect（）是安全的：
        //因为在执行预定的注册任务之后将执行bind（）或connect（）*
        //因为register（），bind（）和connect（）都绑定到同一个线程。
        return regFuture;
    }


     /**
        * Returns the {@link AbstractBootstrapConfig} object that can be used to obtain the current config of the bootstrap.
    *返回可用于获取引导程序的当前配置的{@link AbstractBootstrapConfig}对象。        */
       public abstract AbstractBootstrapConfig<B, C> config();

==========================================ServerBootstrap==================================
    private final ServerBootstrapConfig config = new ServerBootstrapConfig(this);

        @Override
        public final ServerBootstrapConfig config() {
            return config;
        }

    。。。
===========================================ServerBootstrapConfig================================
/**
 * Exposes the configuration of a {@link ServerBootstrapConfig}.
 */
public final class ServerBootstrapConfig extends AbstractBootstrapConfig<ServerBootstrap, ServerChannel> {

    ServerBootstrapConfig(ServerBootstrap bootstrap) {
        super(bootstrap);
    }
===============================================AbstractBootstrap===
    volatile EventLoopGroup group;


     AbstractBootstrap(AbstractBootstrap<B, C> bootstrap) {
            group = bootstrap.group;
            channelFactory = bootstrap.channelFactory;
            handler = bootstrap.handler;
            localAddress = bootstrap.localAddress;
            synchronized (bootstrap.options) {
                options.putAll(bootstrap.options);
            }
            synchronized (bootstrap.attrs) {
                attrs.putAll(bootstrap.attrs);
            }
        }


  /**
     * Returns the configured {@link EventLoopGroup} or {@code null} if non is configured yet.
     */
    @SuppressWarnings("deprecation")
    public final EventLoopGroup group() {
        return bootstrap.group();
    }
  /**
     * Returns the configured {@link EventLoopGroup} or {@code null} if non is configured yet.
     *
     * @deprecated Use {@link #config()} instead.
     */
    @Deprecated
    public final EventLoopGroup group() {
        return group;
    }


===========================================================EventLoopGroup===============
/**
 * 特殊{@link EventExecutorGroup}，允许注册{@link Channel}，以便在事件循环期间进行处理以供日后选择。
 *
 */
public interface EventLoopGroup extends EventExecutorGroup {
    /**
     * Return the next {@link EventLoop} to use
     */
    @Override
    EventLoop next();

    /**
     * 使用此{@link EventLoop}注册{@link Channel}。注册完成后，将返回返回的{@link ChannelFuture}。
     */
    ChannelFuture register(Channel channel);



=========================================MultithreadEventLoopGroup

/**
 * {@link EventLoopGroup}实现的抽象基类，它们同时处理多个线程的任务。
 */
public abstract class MultithreadEventLoopGroup extends MultithreadEventExecutorGroup implements EventLoopGroup {


    private static final InternalLogger logger = InternalLoggerFactory.getInstance(MultithreadEventLoopGroup.class);

    private static final int DEFAULT_EVENT_LOOP_THREADS;

    static {
        DEFAULT_EVENT_LOOP_THREADS = Math.max(1, SystemPropertyUtil.getInt(
                "io.netty.eventLoopThreads", NettyRuntime.availableProcessors() * 2));

        if (logger.isDebugEnabled()) {
            logger.debug("-Dio.netty.eventLoopThreads: {}", DEFAULT_EVENT_LOOP_THREADS);
        }
    }
 @Override
    public EventLoop next() {
        return (EventLoop) super.next();
    }


    @Override
    public ChannelFuture register(Channel channel) {
        return next().register(channel);
    }


}





/**
 * {@link EventExecutorGroup}实现的抽象基类，它同时处理多个线程的任务。
 */
public abstract class MultithreadEventExecutorGroup extends AbstractEventExecutorGroup {
    private final EventExecutor[] children;
    private final Set<EventExecutor> readonlyChildren;
    private final AtomicInteger terminatedChildren = new AtomicInteger();
    private final Promise<?> terminationFuture = new DefaultPromise(GlobalEventExecutor.INSTANCE);
    private final EventExecutorChooserFactory.EventExecutorChooser chooser;

    @Override
    public EventExecutor next() {
        return chooser.next();
    }



==================================EventExecutorChooserFactory
/**
 * Factory that creates new {@link EventExecutorChooser}s.
 */
@UnstableApi
public interface EventExecutorChooserFactory {

    /**
     * Returns a new {@link EventExecutorChooser}.
     */
    EventExecutorChooser newChooser(EventExecutor[] executors);

    /**
     * Chooses the next {@link EventExecutor} to use.
     */
    @UnstableApi
    interface EventExecutorChooser {

        /**
         * Returns the new {@link EventExecutor} to use.
         */
        EventExecutor next();
    }
}


=========================================================DefaultEventExecutorChooserFactory
/**
 * Default implementation which uses simple round-robin to choose next {@link EventExecutor}.
 */
@UnstableApi
public final class DefaultEventExecutorChooserFactory implements EventExecutorChooserFactory {

    public static final DefaultEventExecutorChooserFactory INSTANCE = new DefaultEventExecutorChooserFactory();

    private DefaultEventExecutorChooserFactory() { }

    @SuppressWarnings("unchecked")
    @Override
    public EventExecutorChooser newChooser(EventExecutor[] executors) {
        if (isPowerOfTwo(executors.length)) {
            return new PowerOfTwoEventExecutorChooser(executors);
        } else {
            return new GenericEventExecutorChooser(executors);
        }
    }
