===========================================AbstractBootstrap===========================================
/**
 * {@link AbstractBootstrap}是一个帮助类，可以轻松引导{@link Channel}。它支持方法链，以提供配置{@link AbstractBootstrap}的简便方法。
 *
 * <p>如果未在{@link ServerBootstrap}上下文中使用，{@link #bind（）}方法对于无连接传输（如数据报（UDP））非常有用。</ p>
 * /
public abstract class AbstractBootstrap<B extends AbstractBootstrap<B, C>, C extends Channel> implements Cloneable {

    volatile EventLoopGroup group;
    @SuppressWarnings("deprecation")
    private volatile ChannelFactory<? extends C> channelFactory;
    private volatile SocketAddress localAddress;
    private final Map<ChannelOption<?>, Object> options = new LinkedHashMap<ChannelOption<?>, Object>();
    private final Map<AttributeKey<?>, Object> attrs = new LinkedHashMap<AttributeKey<?>, Object>();
    private volatile ChannelHandler handler;

    AbstractBootstrap() {
        // Disallow extending from a different package.
    }

。。。

  /**
     * Create a new {@link Channel} and bind it.
     */
    public ChannelFuture bind(InetAddress inetHost, int inetPort) {
        return bind(new InetSocketAddress(inetHost, inetPort));
    }

    /**
     * Create a new {@link Channel} and bind it.
     */
    public ChannelFuture bind(SocketAddress localAddress) {
        validate();
        if (localAddress == null) {
            throw new NullPointerException("localAddress");
        }
        return doBind(localAddress);
    }

    private ChannelFuture doBind(final SocketAddress localAddress) {
        final ChannelFuture regFuture = initAndRegister();
        final Channel channel = regFuture.channel();
        if (regFuture.cause() != null) {
            return regFuture;
        }

        if (regFuture.isDone()) {
            // At this point we know that the registration was complete and successful.
            ChannelPromise promise = channel.newPromise();
            doBind0(regFuture, channel, localAddress, promise);
            return promise;
        } else {
            // Registration future is almost always fulfilled already, but just in case it's not.
            final PendingRegistrationPromise promise = new PendingRegistrationPromise(channel);
            regFuture.addListener(new ChannelFutureListener() {
                @Override
                public void operationComplete(ChannelFuture future) throws Exception {
                    Throwable cause = future.cause();
                    if (cause != null) {
                        // Registration on the EventLoop failed so fail the ChannelPromise directly to not cause an
                        // IllegalStateException once we try to access the EventLoop of the Channel.
                        promise.setFailure(cause);
                    } else {
                        // Registration was successful, so set the correct executor to use.
                        // See https://github.com/netty/netty/issues/2586
                        promise.registered();

                        doBind0(regFuture, channel, localAddress, promise);
                    }
                }
            });
            return promise;
        }
    }


    final ChannelFuture initAndRegister() {
        Channel channel = null;
        try {
            //=================ReflectiveChannelFactory.newChannel()
            channel = channelFactory.newChannel();
            //==============ServerBootstrap.init()
            init(channel);
        } catch (Throwable t) {
            if (channel != null) {
                // channel can be null if newChannel crashed (eg SocketException("too many open files"))
                channel.unsafe().closeForcibly();
                // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor
                return new DefaultChannelPromise(channel, GlobalEventExecutor.INSTANCE).setFailure(t);
            }
            // as the Channel is not registered yet we need to force the usage of the GlobalEventExecutor
            return new DefaultChannelPromise(new FailedChannel(), GlobalEventExecutor.INSTANCE).setFailure(t);
        }

        ChannelFuture regFuture = config().group().register(channel);
        if (regFuture.cause() != null) {
            if (channel.isRegistered()) {
                channel.close();
            } else {
                channel.unsafe().closeForcibly();
            }
        }

        // If we are here and the promise is not failed, it's one of the following cases:
        // 1) If we attempted registration from the event loop, the registration has been completed at this point.
        //    i.e. It's safe to attempt bind() or connect() now because the channel has been registered.
        // 2) If we attempted registration from the other thread, the registration request has been successfully
        //    added to the event loop's task queue for later execution.
        //    i.e. It's safe to attempt bind() or connect() now:
        //         because bind() or connect() will be executed *after* the scheduled registration task is executed
        //         because register(), bind(), and connect() are all bound to the same thread.

        return regFuture;
    }

    abstract void init(Channel channel) throws Exception;

    final Map<ChannelOption<?>, Object> options0() {
        return options;
    }

     static void setChannelOptions(
                Channel channel, Map<ChannelOption<?>, Object> options, InternalLogger logger) {
            for (Map.Entry<ChannelOption<?>, Object> e: options.entrySet()) {
                setChannelOption(channel, e.getKey(), e.getValue(), logger);
            }
        }


     @SuppressWarnings("unchecked")
        private static void setChannelOption(
                Channel channel, ChannelOption<?> option, Object value, InternalLogger logger) {
            try {
                if (!channel.config().setOption((ChannelOption<Object>) option, value)) {
                    logger.warn("Unknown channel option '{}' for channel '{}'", option, channel);
                }
            } catch (Throwable t) {
                logger.warn(
                        "Failed to set channel option '{}' with value '{}' for channel '{}'", option, value, channel, t);
            }
        }
。。。

}

==============================================ReflectiveChannelFactory
*  @Override
*   public T newChannel() {
*       try {
*           return constructor.newInstance();
*       } catch (Throwable t) {
*           throw new ChannelException("Unable to create Channel from class " + constructor.getDeclaringClass(), t);
*       }
*   }




===================================================ServerBootstrap

     ServerBootstrapAcceptor(
             final Channel channel, EventLoopGroup childGroup, ChannelHandler childHandler,
             Entry<ChannelOption<?>, Object>[] childOptions, Entry<AttributeKey<?>, Object>[] childAttrs) {
         this.childGroup = childGroup;
         this.childHandler = childHandler;
         this.childOptions = childOptions;
         this.childAttrs = childAttrs;

         // Task which is scheduled to re-enable auto-read.
         // It's important to create this Runnable before we try to submit it as otherwise the URLClassLoader may
         // not be able to load the class because of the file limit it already reached.
         //
         // See https://github.com/netty/netty/issues/1328
         enableAutoReadTask = new Runnable() {
             @Override
             public void run() {
                 channel.config().setAutoRead(true);
             }
         };
     }


   @Override
    void init(Channel channel) throws Exception {
        //private final Map<ChannelOption<?>, Object> options = new LinkedHashMap<ChannelOption<?>, Object>();在AbstractBootstrap中
        //final Map<ChannelOption<?>, Object> options0() {
        //          return options;
        //     }
        final Map<ChannelOption<?>, Object> options = options0();
        synchronized (options) {
            setChannelOptions(channel, options, logger);
        }

        final Map<AttributeKey<?>, Object> attrs = attrs0();
        synchronized (attrs) {
            for (Entry<AttributeKey<?>, Object> e: attrs.entrySet()) {
                @SuppressWarnings("unchecked")
                AttributeKey<Object> key = (AttributeKey<Object>) e.getKey();
                channel.attr(key).set(e.getValue());
            }
        }
        //重要，放后面
        ChannelPipeline p = channel.pipeline();

        final EventLoopGroup currentChildGroup = childGroup;
        final ChannelHandler currentChildHandler = childHandler;
        final Entry<ChannelOption<?>, Object>[] currentChildOptions;
        final Entry<AttributeKey<?>, Object>[] currentChildAttrs;
        synchronized (childOptions) {
            currentChildOptions = childOptions.entrySet().toArray(newOptionArray(0));
        }
        synchronized (childAttrs) {
            currentChildAttrs = childAttrs.entrySet().toArray(newAttrArray(0));
        }

        p.addLast(new ChannelInitializer<Channel>() {
            @Override
             // 注册{@link Channel}后将调用此方法。方法返回后，此实例将从{@link Channel}的{@link ChannelPipeline}中删除。
            public void initChannel(final Channel ch) throws Exception {
                final ChannelPipeline pipeline = ch.pipeline();
                ChannelHandler handler = config.handler();
                //handler注册给bossGroup用的
                if (handler != null) {
                    pipeline.addLast(handler);
                }
                //异步添加接收器
                ch.eventLoop().execute(new Runnable() {
                    @Override
                    public void run() {
                        pipeline.addLast(new ServerBootstrapAcceptor(
                                ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));
                    }
                });
            }
        });
    }

==========================================debug流程.....=========================

==========================================NioServerSocketChannel============================================
    private static ServerSocketChannel newSocket(SelectorProvider provider) {
        try {
            /**
             *  Use the {@link SelectorProvider} to open {@link SocketChannel} and so remove condition in  {@link SelectorProvider#provider()} which is called by each ServerSocketChannel.open() otherwise.
             *  使用{@link SelectorProvider}打开{@link SocketChannel}，删除{@link SelectorProvider＃provider（）}中的条件，否则每个ServerSocketChannel.open（）调用该条件。
             *
             *  See <a href="https://github.com/netty/netty/issues/2308">#2308</a>.
             */
            return provider.openServerSocketChannel();
        } catch (IOException e) {
            throw new ChannelException(
                    "Failed to open a server socket.", e);
        }
    }

=======================...跨度太大，自己点吧



